#+EMAIL: ivan@grishaev.me
#+AUTHOR: Иван Гришаев
#+TITLE: (Единство и (многобразие (Лиспа)))
#+REVEAL_ROOT: http://grishaev.me/talks
#+REVEAL_TRANS: none
#+REVEAL_THEME: simple
#+OPTIONS: reveal_slide_number:nil num:nil toc:nil

#+BEGIN_HTML
<style>
.reveal pre {
box-shadow: none;
font-size: 26pt;
}
</style>
#+END_HTML

* Лисп?
- такой старый язык
- (со (множеством (скобочек)))
- функциональный
- на нем никто не пишет

* Шутка юмора
https://i.ytimg.com/vi/ZxshHHDfaIg/maxresdefault.jpg

* История
- Создан в 1958 году (58 лет назад)
- Попытка сериализовать данные
- eval, и все завертелось

* Что нес Лисп
- минимум синтаксиса
- дробная арифметика
#+BEGIN_SRC lisp
(+ (/ 1 7) (/ 6 7))
> 7
#+END_SRC
- автоматическая сборка мусора
- функциональный стиль
- попытки программировать ИИ
- Лисп-машина

* Развитие
- долго не было стандартов
- огромное число диалектов
- пик популярности 80-е
- спад популярности, стандарт Common Lisp
- современные диалекты

* Заблуждения

* Это не язык
- язык LISP был 50 лет назад
- теперь это идея
- диалекты лиспа сильно различаются

* Скобочки
- их не так уж много:
#+BEGIN_SRC lisp
func(foo, bar)
..
(func foo bar)
#+END_SRC

* Этот ваш JS
#+BEGIN_SRC javascript
            })
          }.bind(this))
        }
      })
    })
  }
})
#+END_SRC

* Это не функциональный язык
- разрешены глобальные переменные
- коллекции изменяются
- ФП-стиль лишь поощрается

* Цитаты

* Ларри Уолл (Perl)
http://www.azquotes.com/picture-quotes/quote-take-lisp-you-know-its-the-most-beautiful-language-in-the-world-at-least-up-until-haskell-larry-wall-112-53-85.jpg

* Столлман (GNU, Emacs)
http://www.azquotes.com/picture-quotes/quote-the-most-powerful-programming-language-is-lisp-if-you-don-t-know-lisp-or-its-variant-richard-stallman-59-24-54.jpg

* Alan Kay (Smalltalk, OOP)
- "Lisp isn't a language, it's a building material."
- "the greatest single programming language ever designed"

* Eric Raymond (Mozilla, Linux)
"Lisp was far more powerful and flexible than any other language of its day; in fact, it is still a better design than most languages of today, twenty-five years later.

* Philip Greenspun (hacker)
"SQL, Lisp, and Haskell are the only programming languages that I've seen where one spends more time thinking than typing."

* Повлиял на
Elixir,  Forth, Haskell, JavaScript, Julia, Logo, Lua, Mathematica, Nim, Perl, Python, R,  Ruby, Scala, Smalltalk, Tcl

* DSL для всего
- вырождается в код предметной области
- "нужно взять стандарт и расставить скобки"

* SQL
#+BEGIN_SRC lisp
(select (:title :author :year)
  (from :books)
  (where (:and (:>= :year 1995)
               (:< :year 2010)))
  (order-by (:desc :year)))
#+END_SRC

* HTML
#+BEGIN_SRC clojure
(defn simple-component []
  [:div
   [:p "I am a component!"]
   [:p.someclass
    "I have " [:strong "bold"]
    [:span {:style {:color "red"}} " and red "]
      "text."]])
#+END_SRC

* XML
#+BEGIN_SRC clojure
(element :foo {:foo-attr "foo value"}
  (element :bar {:bar-attr "bar value"}
    (element :baz {} "The baz value1")
    (element :baz {} "The baz value2")
    (element :baz {} "The baz value3")))
#+END_SRC

* HTTP API
#+BEGIN_SRC clojure
(context "/api" []
  (GET "/plus" []
    :return {:result Long}
    :query-params [x :- Long, y :- Long]
    :summary "adds two numbers together"
    (ok {:result (+ x y)}))
#+END_SRC

* Недостатки
- невероятная гибкость
- код это дерево
- малый срок жизни кода в Гите

* Три диалекта
- Common Lisp
- Racket
- Clojure

* Common Lisp
- объединил множество диалектов в один
- финансировался DARPA
- промышленность и военные нужды

* Racket
- бывший диалект Scheme
- богатая библиотека
- IDE, GUI, веб-сервер
- на всех платформах
- идеален для обучения
- SICP!

* Clojure
- Лисп на стероидах
- Компилируется в JVM
- интеграция с java-кодом
- основной диалект

* Немного об авторе
- Рич Хики, C++, Java
- создал язык за 2 года
- на личные средства и время
- доклады!
- главный критерий -- простота

* ClojureScript
- реализация Clojure на Js
- не только в Clojure-проектах
- привязки к React
- одностраничные приложения

* Идеи Лиспа

* Function Trees
- Деревья функций
- Код как структура данных

* Пример
- структура функций + интерпретатор
#+BEGIN_SRC javascript
[
  dispatch(AUTHENTICATING),
  authenticateUser, {
    error: [
      dispatch(AUTHENTICATED_ERROR)
    ],
    success: [
      dispatch(AUTHENTICATED_SUCCESS),
      ...getAssignments
    ]
  }
]
#+END_SRC

* React.js
- Интерфейс как дерево компонентов
- Декларативность

* Пример
#+BEGIN_SRC javascript
class ShoppingList extends React.Component {
  render() {
    return (
      <div className="shopping-list">
        <h1>Shopping List for {this.props.name}</h1>
        <ButtonWidget>
        <ul>
          <li>Instagram</li>
          <li>WhatsApp</li>
          <li>Oculus</li>
#+END_SRC

* React bindings
- Om
- Reagent
- Rum
- Re-frame

* Где используется?
- Космос, военщина
- Заводы

* Grammarly
- сервис проверки правописания

* NaughtyDog
- вся серия игр на PlayStation
- выборочно на PC
http://s.emuparadise.org/fup/up/36716-Crash_Bandicoot_[U]-1.png

* CAD systems
- AutoCAD
- AutoLisp
- Autodesk

* Emacs
- Развивается 40+ лет
- IDE, почтовый клиент
- работа с документами
- запуск процессов

* Крупный бизнес
- Wallmart
- Ebay
- BBC

* Крупный бизнес
- Amazon
- Verizon
- Y Combinator (Arc)

* John Carmack
I just dumped the C++ server I wrote last year for a new one in Racket. May not scale, but it is winning for development even as a newbie.

John Carmack working on Scheme as a VR scripting language

* Мощь Лиспа

* Код как данные
- код -- дерево списков
- макросы получают код как список
- и возвращают список как будущий код
- собственный синтаксис

* Код как данные
#+BEGIN_SRC lisp
(expr 1 + 2 * (3 + 100) / 42)
[1, +, 2, *, (, 3, +, 100, ), /, 42, ]
[+, 1, (, /, (, *, 2, (, +, 3, 100,), ), 42, ), ), ]
(+ 1 (/ (* 2 (+ 3 100)) 42)))
#+END_SRC

* Правила чтения кода

* Читаем JSON
#+BEGIN_SRC lisp
> [1, 2, "foo"]
#(1 2 "foo")

> { "foo": 1, "bar": 2 }
#<HASH-TABLE :TEST EQUAL :COUNT 2 {1004EA5DD3}>
#+END_SRC

* Хеш-таблицы и векторы
#+BEGIN_SRC lisp
> [1 2 "foo"]
#(1 2 "foo")

> {:foo 1 :bar 2}
#<HASH-TABLE :TEST EQUAL :COUNT 2 {1004EA5DD3}>
#+END_SRC

* Саморасширяемость
- свое ООП (CLOS)
- свои исключения (slingshot)
- дженерики, матчинг, ...

* Было
- стандартные исключения Джавы
#+BEGIN_SRC clojure
(throw (Exception. "my exception message"))
...
(catch SQLException se (prn (.getNextException e)))
(catch Exception2 e (prn "Handle generic exception"))
#+END_SRC

* Стало
- кидаем и ловим что угодно!
#+BEGIN_SRC clojure
(throw+ {:type ::bad-tree :tree tree :hint hint})
...
(catch [:type :tensor.parse/bad-tree]
       {:keys [tree hint]}
  (log/error "failed to parse" tree "with hint" hint)
#+END_SRC

* REPL
- Read, Eval, Print, Loop
- интерактивная разработка
- горячая замена кода
- исполнение кода из редактора
- удаленная отладка

* Навигация
- код это дерево
- переходы вглубь, наверх,
- по текущему уровню
- сдвиги форм
- слияние, деление, удаление форм

* Вакансии?

* Классические диалекты (CL, Racket)
- встречаются редко
- не бывают удаленными
- большая ответственность

* Clojure(Script)
- много в США
- попадается в Европе и Африке
- до России еще не дошло

* Где искать

* Специальные доски
- Functionals Works
- Functional Jobs
- Lisp Jobs

* Сообщества
- рассылка lisp-hug@lispworks.com
- группы гугла, например London Clojurian Jobs
- слак clojurians.slack.com

* Вопросы?

* Ссылки
- https://jobs.functionalworks.com/
- https://functionaljobs.com/
- https://lispjobs.wordpress.com/
- http://clojurescript.net/
- http://clojure.org/
- http://lisp-lang.org/
- https://groups.google.com/forum/#!msg/racket-users/RFlh0o6l3Ls/8InN7uz-Mv4J
- https://twitter.com/ID_AA_Carmack/status/577877590070919168
